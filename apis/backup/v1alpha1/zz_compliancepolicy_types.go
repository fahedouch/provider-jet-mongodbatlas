/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CompliancePolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	OnDemandPolicyItem []OnDemandPolicyItemObservation `json:"onDemandPolicyItem,omitempty" tf:"on_demand_policy_item,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemDaily []PolicyItemDailyObservation `json:"policyItemDaily,omitempty" tf:"policy_item_daily,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemHourly []PolicyItemHourlyObservation `json:"policyItemHourly,omitempty" tf:"policy_item_hourly,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemMonthly []PolicyItemMonthlyObservation `json:"policyItemMonthly,omitempty" tf:"policy_item_monthly,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemWeekly []PolicyItemWeeklyObservation `json:"policyItemWeekly,omitempty" tf:"policy_item_weekly,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UpdatedDate *string `json:"updatedDate,omitempty" tf:"updated_date,omitempty"`

	UpdatedUser *string `json:"updatedUser,omitempty" tf:"updated_user,omitempty"`
}

type CompliancePolicyParameters struct {

	// +kubebuilder:validation:Required
	AuthorizedEmail *string `json:"authorizedEmail" tf:"authorized_email,omitempty"`

	// +kubebuilder:validation:Required
	CopyProtectionEnabled *bool `json:"copyProtectionEnabled" tf:"copy_protection_enabled,omitempty"`

	// +kubebuilder:validation:Required
	EncryptionAtRestEnabled *bool `json:"encryptionAtRestEnabled" tf:"encryption_at_rest_enabled,omitempty"`

	// +kubebuilder:validation:Required
	OnDemandPolicyItem []OnDemandPolicyItemParameters `json:"onDemandPolicyItem" tf:"on_demand_policy_item,omitempty"`

	// +kubebuilder:validation:Required
	PitEnabled *bool `json:"pitEnabled" tf:"pit_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemDaily []PolicyItemDailyParameters `json:"policyItemDaily,omitempty" tf:"policy_item_daily,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemHourly []PolicyItemHourlyParameters `json:"policyItemHourly,omitempty" tf:"policy_item_hourly,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemMonthly []PolicyItemMonthlyParameters `json:"policyItemMonthly,omitempty" tf:"policy_item_monthly,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemWeekly []PolicyItemWeeklyParameters `json:"policyItemWeekly,omitempty" tf:"policy_item_weekly,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RestoreWindowDays *float64 `json:"restoreWindowDays,omitempty" tf:"restore_window_days,omitempty"`
}

type OnDemandPolicyItemObservation struct {
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OnDemandPolicyItemParameters struct {

	// +kubebuilder:validation:Required
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// +kubebuilder:validation:Required
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// +kubebuilder:validation:Required
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemDailyObservation struct {
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyItemDailyParameters struct {

	// +kubebuilder:validation:Required
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// +kubebuilder:validation:Required
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// +kubebuilder:validation:Required
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemHourlyObservation struct {
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyItemHourlyParameters struct {

	// +kubebuilder:validation:Required
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// +kubebuilder:validation:Required
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// +kubebuilder:validation:Required
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemMonthlyObservation struct {
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyItemMonthlyParameters struct {

	// +kubebuilder:validation:Required
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// +kubebuilder:validation:Required
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// +kubebuilder:validation:Required
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemWeeklyObservation struct {
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyItemWeeklyParameters struct {

	// +kubebuilder:validation:Required
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// +kubebuilder:validation:Required
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// +kubebuilder:validation:Required
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

// CompliancePolicySpec defines the desired state of CompliancePolicy
type CompliancePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CompliancePolicyParameters `json:"forProvider"`
}

// CompliancePolicyStatus defines the observed state of CompliancePolicy.
type CompliancePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CompliancePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CompliancePolicy is the Schema for the CompliancePolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type CompliancePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CompliancePolicySpec   `json:"spec"`
	Status            CompliancePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CompliancePolicyList contains a list of CompliancePolicys
type CompliancePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CompliancePolicy `json:"items"`
}

// Repository type metadata.
var (
	CompliancePolicy_Kind             = "CompliancePolicy"
	CompliancePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CompliancePolicy_Kind}.String()
	CompliancePolicy_KindAPIVersion   = CompliancePolicy_Kind + "." + CRDGroupVersion.String()
	CompliancePolicy_GroupVersionKind = CRDGroupVersion.WithKind(CompliancePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&CompliancePolicy{}, &CompliancePolicyList{})
}
