/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this BackupSchedule
func (mg *BackupSchedule) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_backup_schedule"
}

// GetConnectionDetailsMapping for this BackupSchedule
func (tr *BackupSchedule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this BackupSchedule
func (tr *BackupSchedule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this BackupSchedule
func (tr *BackupSchedule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this BackupSchedule
func (tr *BackupSchedule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this BackupSchedule
func (tr *BackupSchedule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this BackupSchedule
func (tr *BackupSchedule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this BackupSchedule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *BackupSchedule) LateInitialize(attrs []byte) (bool, error) {
	params := &BackupScheduleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *BackupSchedule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this BackupSnapshot
func (mg *BackupSnapshot) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_backup_snapshot"
}

// GetConnectionDetailsMapping for this BackupSnapshot
func (tr *BackupSnapshot) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this BackupSnapshot
func (tr *BackupSnapshot) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this BackupSnapshot
func (tr *BackupSnapshot) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this BackupSnapshot
func (tr *BackupSnapshot) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this BackupSnapshot
func (tr *BackupSnapshot) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this BackupSnapshot
func (tr *BackupSnapshot) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this BackupSnapshot using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *BackupSnapshot) LateInitialize(attrs []byte) (bool, error) {
	params := &BackupSnapshotParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *BackupSnapshot) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this BackupSnapshotExportBucket
func (mg *BackupSnapshotExportBucket) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_backup_snapshot_export_bucket"
}

// GetConnectionDetailsMapping for this BackupSnapshotExportBucket
func (tr *BackupSnapshotExportBucket) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this BackupSnapshotExportBucket
func (tr *BackupSnapshotExportBucket) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this BackupSnapshotExportBucket
func (tr *BackupSnapshotExportBucket) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this BackupSnapshotExportBucket
func (tr *BackupSnapshotExportBucket) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this BackupSnapshotExportBucket
func (tr *BackupSnapshotExportBucket) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this BackupSnapshotExportBucket
func (tr *BackupSnapshotExportBucket) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this BackupSnapshotExportBucket using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *BackupSnapshotExportBucket) LateInitialize(attrs []byte) (bool, error) {
	params := &BackupSnapshotExportBucketParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *BackupSnapshotExportBucket) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this BackupSnapshotExportJob
func (mg *BackupSnapshotExportJob) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_backup_snapshot_export_job"
}

// GetConnectionDetailsMapping for this BackupSnapshotExportJob
func (tr *BackupSnapshotExportJob) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this BackupSnapshotExportJob
func (tr *BackupSnapshotExportJob) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this BackupSnapshotExportJob
func (tr *BackupSnapshotExportJob) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this BackupSnapshotExportJob
func (tr *BackupSnapshotExportJob) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this BackupSnapshotExportJob
func (tr *BackupSnapshotExportJob) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this BackupSnapshotExportJob
func (tr *BackupSnapshotExportJob) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this BackupSnapshotExportJob using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *BackupSnapshotExportJob) LateInitialize(attrs []byte) (bool, error) {
	params := &BackupSnapshotExportJobParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *BackupSnapshotExportJob) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this BackupSnapshotRestoreJob
func (mg *BackupSnapshotRestoreJob) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_backup_snapshot_restore_job"
}

// GetConnectionDetailsMapping for this BackupSnapshotRestoreJob
func (tr *BackupSnapshotRestoreJob) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this BackupSnapshotRestoreJob
func (tr *BackupSnapshotRestoreJob) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this BackupSnapshotRestoreJob
func (tr *BackupSnapshotRestoreJob) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this BackupSnapshotRestoreJob
func (tr *BackupSnapshotRestoreJob) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this BackupSnapshotRestoreJob
func (tr *BackupSnapshotRestoreJob) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this BackupSnapshotRestoreJob
func (tr *BackupSnapshotRestoreJob) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this BackupSnapshotRestoreJob using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *BackupSnapshotRestoreJob) LateInitialize(attrs []byte) (bool, error) {
	params := &BackupSnapshotRestoreJobParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *BackupSnapshotRestoreJob) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProviderAccess
func (mg *ProviderAccess) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_provider_access"
}

// GetConnectionDetailsMapping for this ProviderAccess
func (tr *ProviderAccess) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProviderAccess
func (tr *ProviderAccess) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProviderAccess
func (tr *ProviderAccess) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProviderAccess
func (tr *ProviderAccess) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProviderAccess
func (tr *ProviderAccess) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProviderAccess
func (tr *ProviderAccess) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ProviderAccess using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProviderAccess) LateInitialize(attrs []byte) (bool, error) {
	params := &ProviderAccessParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProviderAccess) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ProviderAccessAuthorization
func (mg *ProviderAccessAuthorization) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_provider_access_authorization"
}

// GetConnectionDetailsMapping for this ProviderAccessAuthorization
func (tr *ProviderAccessAuthorization) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProviderAccessAuthorization
func (tr *ProviderAccessAuthorization) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProviderAccessAuthorization
func (tr *ProviderAccessAuthorization) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProviderAccessAuthorization
func (tr *ProviderAccessAuthorization) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProviderAccessAuthorization
func (tr *ProviderAccessAuthorization) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProviderAccessAuthorization
func (tr *ProviderAccessAuthorization) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ProviderAccessAuthorization using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProviderAccessAuthorization) LateInitialize(attrs []byte) (bool, error) {
	params := &ProviderAccessAuthorizationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProviderAccessAuthorization) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ProviderAccessSetup
func (mg *ProviderAccessSetup) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_provider_access_setup"
}

// GetConnectionDetailsMapping for this ProviderAccessSetup
func (tr *ProviderAccessSetup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProviderAccessSetup
func (tr *ProviderAccessSetup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProviderAccessSetup
func (tr *ProviderAccessSetup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProviderAccessSetup
func (tr *ProviderAccessSetup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProviderAccessSetup
func (tr *ProviderAccessSetup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProviderAccessSetup
func (tr *ProviderAccessSetup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ProviderAccessSetup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProviderAccessSetup) LateInitialize(attrs []byte) (bool, error) {
	params := &ProviderAccessSetupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProviderAccessSetup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProviderSnapshot
func (mg *ProviderSnapshot) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_provider_snapshot"
}

// GetConnectionDetailsMapping for this ProviderSnapshot
func (tr *ProviderSnapshot) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProviderSnapshot
func (tr *ProviderSnapshot) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProviderSnapshot
func (tr *ProviderSnapshot) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProviderSnapshot
func (tr *ProviderSnapshot) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProviderSnapshot
func (tr *ProviderSnapshot) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProviderSnapshot
func (tr *ProviderSnapshot) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ProviderSnapshot using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProviderSnapshot) LateInitialize(attrs []byte) (bool, error) {
	params := &ProviderSnapshotParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProviderSnapshot) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProviderSnapshotBackupPolicy
func (mg *ProviderSnapshotBackupPolicy) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_provider_snapshot_backup_policy"
}

// GetConnectionDetailsMapping for this ProviderSnapshotBackupPolicy
func (tr *ProviderSnapshotBackupPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProviderSnapshotBackupPolicy
func (tr *ProviderSnapshotBackupPolicy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProviderSnapshotBackupPolicy
func (tr *ProviderSnapshotBackupPolicy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProviderSnapshotBackupPolicy
func (tr *ProviderSnapshotBackupPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProviderSnapshotBackupPolicy
func (tr *ProviderSnapshotBackupPolicy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProviderSnapshotBackupPolicy
func (tr *ProviderSnapshotBackupPolicy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ProviderSnapshotBackupPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProviderSnapshotBackupPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ProviderSnapshotBackupPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProviderSnapshotBackupPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProviderSnapshotRestoreJob
func (mg *ProviderSnapshotRestoreJob) GetTerraformResourceType() string {
	return "mongodbatlas_cloud_provider_snapshot_restore_job"
}

// GetConnectionDetailsMapping for this ProviderSnapshotRestoreJob
func (tr *ProviderSnapshotRestoreJob) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProviderSnapshotRestoreJob
func (tr *ProviderSnapshotRestoreJob) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProviderSnapshotRestoreJob
func (tr *ProviderSnapshotRestoreJob) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProviderSnapshotRestoreJob
func (tr *ProviderSnapshotRestoreJob) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProviderSnapshotRestoreJob
func (tr *ProviderSnapshotRestoreJob) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProviderSnapshotRestoreJob
func (tr *ProviderSnapshotRestoreJob) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ProviderSnapshotRestoreJob using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProviderSnapshotRestoreJob) LateInitialize(attrs []byte) (bool, error) {
	params := &ProviderSnapshotRestoreJobParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProviderSnapshotRestoreJob) GetTerraformSchemaVersion() int {
	return 0
}
