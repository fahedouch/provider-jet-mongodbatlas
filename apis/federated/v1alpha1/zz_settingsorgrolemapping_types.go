/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleAssignmentsObservation struct {
}

type RoleAssignmentsParameters struct {

	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Optional
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type SettingsOrgRoleMappingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SettingsOrgRoleMappingParameters struct {

	// +kubebuilder:validation:Required
	ExternalGroupName *string `json:"externalGroupName" tf:"external_group_name,omitempty"`

	// +kubebuilder:validation:Required
	FederationSettingsID *string `json:"federationSettingsId" tf:"federation_settings_id,omitempty"`

	// +kubebuilder:validation:Required
	OrgID *string `json:"orgId" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Required
	RoleAssignments []RoleAssignmentsParameters `json:"roleAssignments" tf:"role_assignments,omitempty"`
}

// SettingsOrgRoleMappingSpec defines the desired state of SettingsOrgRoleMapping
type SettingsOrgRoleMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingsOrgRoleMappingParameters `json:"forProvider"`
}

// SettingsOrgRoleMappingStatus defines the observed state of SettingsOrgRoleMapping.
type SettingsOrgRoleMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingsOrgRoleMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsOrgRoleMapping is the Schema for the SettingsOrgRoleMappings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type SettingsOrgRoleMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SettingsOrgRoleMappingSpec   `json:"spec"`
	Status            SettingsOrgRoleMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsOrgRoleMappingList contains a list of SettingsOrgRoleMappings
type SettingsOrgRoleMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SettingsOrgRoleMapping `json:"items"`
}

// Repository type metadata.
var (
	SettingsOrgRoleMapping_Kind             = "SettingsOrgRoleMapping"
	SettingsOrgRoleMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SettingsOrgRoleMapping_Kind}.String()
	SettingsOrgRoleMapping_KindAPIVersion   = SettingsOrgRoleMapping_Kind + "." + CRDGroupVersion.String()
	SettingsOrgRoleMapping_GroupVersionKind = CRDGroupVersion.WithKind(SettingsOrgRoleMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&SettingsOrgRoleMapping{}, &SettingsOrgRoleMappingList{})
}
