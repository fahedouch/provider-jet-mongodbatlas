/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SettingsIdentityProviderObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OktaIdpID *string `json:"oktaIdpId,omitempty" tf:"okta_idp_id,omitempty"`
}

type SettingsIdentityProviderParameters struct {

	// +kubebuilder:validation:Optional
	AssociatedDomains []*string `json:"associatedDomains,omitempty" tf:"associated_domains,omitempty"`

	// +kubebuilder:validation:Required
	FederationSettingsID *string `json:"federationSettingsId" tf:"federation_settings_id,omitempty"`

	// +kubebuilder:validation:Required
	IssuerURI *string `json:"issuerUri" tf:"issuer_uri,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RequestBinding *string `json:"requestBinding" tf:"request_binding,omitempty"`

	// +kubebuilder:validation:Required
	ResponseSignatureAlgorithm *string `json:"responseSignatureAlgorithm" tf:"response_signature_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	SsoDebugEnabled *bool `json:"ssoDebugEnabled" tf:"sso_debug_enabled,omitempty"`

	// +kubebuilder:validation:Required
	SsoURL *string `json:"ssoUrl" tf:"sso_url,omitempty"`

	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`
}

// SettingsIdentityProviderSpec defines the desired state of SettingsIdentityProvider
type SettingsIdentityProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingsIdentityProviderParameters `json:"forProvider"`
}

// SettingsIdentityProviderStatus defines the observed state of SettingsIdentityProvider.
type SettingsIdentityProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingsIdentityProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsIdentityProvider is the Schema for the SettingsIdentityProviders API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type SettingsIdentityProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SettingsIdentityProviderSpec   `json:"spec"`
	Status            SettingsIdentityProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsIdentityProviderList contains a list of SettingsIdentityProviders
type SettingsIdentityProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SettingsIdentityProvider `json:"items"`
}

// Repository type metadata.
var (
	SettingsIdentityProvider_Kind             = "SettingsIdentityProvider"
	SettingsIdentityProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SettingsIdentityProvider_Kind}.String()
	SettingsIdentityProvider_KindAPIVersion   = SettingsIdentityProvider_Kind + "." + CRDGroupVersion.String()
	SettingsIdentityProvider_GroupVersionKind = CRDGroupVersion.WithKind(SettingsIdentityProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&SettingsIdentityProvider{}, &SettingsIdentityProviderList{})
}
